"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/postgres-array";
exports.ids = ["vendor-chunks/postgres-array"];
exports.modules = {

/***/ "(rsc)/./node_modules/postgres-array/index.js":
/*!**********************************************!*\
  !*** ./node_modules/postgres-array/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nconst BACKSLASH = '\\\\'\nconst DQUOT = '\"'\nconst LBRACE = '{'\nconst RBRACE = '}'\nconst LBRACKET = '['\nconst EQUALS = '='\nconst COMMA = ','\n\n/** When the raw value is this, it means a literal `null` */\nconst NULL_STRING = 'NULL'\n\n/**\n * Parses an array according to\n * https://www.postgresql.org/docs/17/arrays.html#ARRAYS-IO\n *\n * Trusts the data (mostly), so only hook up to trusted Postgres servers.\n */\nfunction makeParseArrayWithTransform (transform) {\n  const haveTransform = transform != null\n  return function parseArray (str) {\n    // If starts with `[`, it is specifying the index boundas. Skip past first `=`.\n    let position = 0\n    if (str[position] === LBRACKET) {\n      position = str.indexOf(EQUALS) + 1\n    }\n\n    if (str[position++] !== LBRACE) {\n      throw new Error('Invalid array text - must start with {')\n    }\n    const rbraceIndex = str.length - 1\n    if (str[rbraceIndex] !== RBRACE) {\n      throw new Error('Invalid array text - must end with }')\n    }\n    const output = []\n    let current = output\n    const stack = []\n\n    let currentStringStart = position\n    const currentStringParts = []\n    let hasStringParts = false\n    let expectValue = true\n\n    for (; position < rbraceIndex; ++position) {\n      let char = str[position]\n      // > The array output routine will put double quotes around element values if\n      // > they are empty strings, contain curly braces, delimiter characters, double\n      // > quotes, backslashes, or white space, or match the word NULL. Double quotes\n      // > and backslashes embedded in element values will be backslash-escaped.\n      if (char === DQUOT) {\n        // It's escaped\n        currentStringStart = ++position\n        let dquot = str.indexOf(DQUOT, currentStringStart)\n        let backSlash = str.indexOf(BACKSLASH, currentStringStart)\n        while (backSlash !== -1 && backSlash < dquot) {\n          position = backSlash\n          const part = str.slice(currentStringStart, position)\n          currentStringParts.push(part)\n          hasStringParts = true\n          currentStringStart = ++position\n          if (dquot === position++) {\n            // This was an escaped doublequote; find the next one!\n            dquot = str.indexOf(DQUOT, position)\n          }\n          // Either way, find the next backslash\n          backSlash = str.indexOf(BACKSLASH, position)\n        }\n        position = dquot\n        const part = str.slice(currentStringStart, position)\n        if (hasStringParts) {\n          const final = currentStringParts.join('') + part\n          current.push(haveTransform ? transform(final) : final)\n          currentStringParts.length = 0\n          hasStringParts = false\n        } else {\n          current.push(haveTransform ? transform(part) : part)\n        }\n        expectValue = false\n      } else if (char === LBRACE) {\n        const newArray = []\n        current.push(newArray)\n        stack.push(current)\n        current = newArray\n        currentStringStart = position + 1\n        expectValue = true\n      } else if (char === COMMA) {\n        expectValue = true\n      } else if (char === RBRACE) {\n        expectValue = false\n        const arr = stack.pop()\n        if (arr === undefined) {\n          throw new Error(\"Invalid array text - too many '}'\")\n        }\n        current = arr\n      } else if (expectValue) {\n        currentStringStart = position\n        while (\n          (char = str[position]) !== COMMA &&\n          char !== RBRACE &&\n          position < rbraceIndex\n        ) {\n          ++position\n        }\n        const part = str.slice(currentStringStart, position--)\n        current.push(\n          part === NULL_STRING ? null : haveTransform ? transform(part) : part\n        )\n        expectValue = false\n      } else {\n        throw new Error('Was expecting delimeter')\n      }\n    }\n\n    return output\n  }\n}\n\nconst parseArray = makeParseArrayWithTransform()\n\nexports.parse = (source, transform) =>\n  transform != null\n    ? makeParseArrayWithTransform(transform)(source)\n    : parseArray(source)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMtYXJyYXkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVyx3QkFBd0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLGFBQWE7QUFDYjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkY6XFxOZXh0SnMgUHJvamVjdFxcZXN0b3JlXFxub2RlX21vZHVsZXNcXHBvc3RncmVzLWFycmF5XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgQkFDS1NMQVNIID0gJ1xcXFwnXG5jb25zdCBEUVVPVCA9ICdcIidcbmNvbnN0IExCUkFDRSA9ICd7J1xuY29uc3QgUkJSQUNFID0gJ30nXG5jb25zdCBMQlJBQ0tFVCA9ICdbJ1xuY29uc3QgRVFVQUxTID0gJz0nXG5jb25zdCBDT01NQSA9ICcsJ1xuXG4vKiogV2hlbiB0aGUgcmF3IHZhbHVlIGlzIHRoaXMsIGl0IG1lYW5zIGEgbGl0ZXJhbCBgbnVsbGAgKi9cbmNvbnN0IE5VTExfU1RSSU5HID0gJ05VTEwnXG5cbi8qKlxuICogUGFyc2VzIGFuIGFycmF5IGFjY29yZGluZyB0b1xuICogaHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy8xNy9hcnJheXMuaHRtbCNBUlJBWVMtSU9cbiAqXG4gKiBUcnVzdHMgdGhlIGRhdGEgKG1vc3RseSksIHNvIG9ubHkgaG9vayB1cCB0byB0cnVzdGVkIFBvc3RncmVzIHNlcnZlcnMuXG4gKi9cbmZ1bmN0aW9uIG1ha2VQYXJzZUFycmF5V2l0aFRyYW5zZm9ybSAodHJhbnNmb3JtKSB7XG4gIGNvbnN0IGhhdmVUcmFuc2Zvcm0gPSB0cmFuc2Zvcm0gIT0gbnVsbFxuICByZXR1cm4gZnVuY3Rpb24gcGFyc2VBcnJheSAoc3RyKSB7XG4gICAgLy8gSWYgc3RhcnRzIHdpdGggYFtgLCBpdCBpcyBzcGVjaWZ5aW5nIHRoZSBpbmRleCBib3VuZGFzLiBTa2lwIHBhc3QgZmlyc3QgYD1gLlxuICAgIGxldCBwb3NpdGlvbiA9IDBcbiAgICBpZiAoc3RyW3Bvc2l0aW9uXSA9PT0gTEJSQUNLRVQpIHtcbiAgICAgIHBvc2l0aW9uID0gc3RyLmluZGV4T2YoRVFVQUxTKSArIDFcbiAgICB9XG5cbiAgICBpZiAoc3RyW3Bvc2l0aW9uKytdICE9PSBMQlJBQ0UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhcnJheSB0ZXh0IC0gbXVzdCBzdGFydCB3aXRoIHsnKVxuICAgIH1cbiAgICBjb25zdCByYnJhY2VJbmRleCA9IHN0ci5sZW5ndGggLSAxXG4gICAgaWYgKHN0cltyYnJhY2VJbmRleF0gIT09IFJCUkFDRSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFycmF5IHRleHQgLSBtdXN0IGVuZCB3aXRoIH0nKVxuICAgIH1cbiAgICBjb25zdCBvdXRwdXQgPSBbXVxuICAgIGxldCBjdXJyZW50ID0gb3V0cHV0XG4gICAgY29uc3Qgc3RhY2sgPSBbXVxuXG4gICAgbGV0IGN1cnJlbnRTdHJpbmdTdGFydCA9IHBvc2l0aW9uXG4gICAgY29uc3QgY3VycmVudFN0cmluZ1BhcnRzID0gW11cbiAgICBsZXQgaGFzU3RyaW5nUGFydHMgPSBmYWxzZVxuICAgIGxldCBleHBlY3RWYWx1ZSA9IHRydWVcblxuICAgIGZvciAoOyBwb3NpdGlvbiA8IHJicmFjZUluZGV4OyArK3Bvc2l0aW9uKSB7XG4gICAgICBsZXQgY2hhciA9IHN0cltwb3NpdGlvbl1cbiAgICAgIC8vID4gVGhlIGFycmF5IG91dHB1dCByb3V0aW5lIHdpbGwgcHV0IGRvdWJsZSBxdW90ZXMgYXJvdW5kIGVsZW1lbnQgdmFsdWVzIGlmXG4gICAgICAvLyA+IHRoZXkgYXJlIGVtcHR5IHN0cmluZ3MsIGNvbnRhaW4gY3VybHkgYnJhY2VzLCBkZWxpbWl0ZXIgY2hhcmFjdGVycywgZG91YmxlXG4gICAgICAvLyA+IHF1b3RlcywgYmFja3NsYXNoZXMsIG9yIHdoaXRlIHNwYWNlLCBvciBtYXRjaCB0aGUgd29yZCBOVUxMLiBEb3VibGUgcXVvdGVzXG4gICAgICAvLyA+IGFuZCBiYWNrc2xhc2hlcyBlbWJlZGRlZCBpbiBlbGVtZW50IHZhbHVlcyB3aWxsIGJlIGJhY2tzbGFzaC1lc2NhcGVkLlxuICAgICAgaWYgKGNoYXIgPT09IERRVU9UKSB7XG4gICAgICAgIC8vIEl0J3MgZXNjYXBlZFxuICAgICAgICBjdXJyZW50U3RyaW5nU3RhcnQgPSArK3Bvc2l0aW9uXG4gICAgICAgIGxldCBkcXVvdCA9IHN0ci5pbmRleE9mKERRVU9ULCBjdXJyZW50U3RyaW5nU3RhcnQpXG4gICAgICAgIGxldCBiYWNrU2xhc2ggPSBzdHIuaW5kZXhPZihCQUNLU0xBU0gsIGN1cnJlbnRTdHJpbmdTdGFydClcbiAgICAgICAgd2hpbGUgKGJhY2tTbGFzaCAhPT0gLTEgJiYgYmFja1NsYXNoIDwgZHF1b3QpIHtcbiAgICAgICAgICBwb3NpdGlvbiA9IGJhY2tTbGFzaFxuICAgICAgICAgIGNvbnN0IHBhcnQgPSBzdHIuc2xpY2UoY3VycmVudFN0cmluZ1N0YXJ0LCBwb3NpdGlvbilcbiAgICAgICAgICBjdXJyZW50U3RyaW5nUGFydHMucHVzaChwYXJ0KVxuICAgICAgICAgIGhhc1N0cmluZ1BhcnRzID0gdHJ1ZVxuICAgICAgICAgIGN1cnJlbnRTdHJpbmdTdGFydCA9ICsrcG9zaXRpb25cbiAgICAgICAgICBpZiAoZHF1b3QgPT09IHBvc2l0aW9uKyspIHtcbiAgICAgICAgICAgIC8vIFRoaXMgd2FzIGFuIGVzY2FwZWQgZG91YmxlcXVvdGU7IGZpbmQgdGhlIG5leHQgb25lIVxuICAgICAgICAgICAgZHF1b3QgPSBzdHIuaW5kZXhPZihEUVVPVCwgcG9zaXRpb24pXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEVpdGhlciB3YXksIGZpbmQgdGhlIG5leHQgYmFja3NsYXNoXG4gICAgICAgICAgYmFja1NsYXNoID0gc3RyLmluZGV4T2YoQkFDS1NMQVNILCBwb3NpdGlvbilcbiAgICAgICAgfVxuICAgICAgICBwb3NpdGlvbiA9IGRxdW90XG4gICAgICAgIGNvbnN0IHBhcnQgPSBzdHIuc2xpY2UoY3VycmVudFN0cmluZ1N0YXJ0LCBwb3NpdGlvbilcbiAgICAgICAgaWYgKGhhc1N0cmluZ1BhcnRzKSB7XG4gICAgICAgICAgY29uc3QgZmluYWwgPSBjdXJyZW50U3RyaW5nUGFydHMuam9pbignJykgKyBwYXJ0XG4gICAgICAgICAgY3VycmVudC5wdXNoKGhhdmVUcmFuc2Zvcm0gPyB0cmFuc2Zvcm0oZmluYWwpIDogZmluYWwpXG4gICAgICAgICAgY3VycmVudFN0cmluZ1BhcnRzLmxlbmd0aCA9IDBcbiAgICAgICAgICBoYXNTdHJpbmdQYXJ0cyA9IGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudC5wdXNoKGhhdmVUcmFuc2Zvcm0gPyB0cmFuc2Zvcm0ocGFydCkgOiBwYXJ0KVxuICAgICAgICB9XG4gICAgICAgIGV4cGVjdFZhbHVlID0gZmFsc2VcbiAgICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gTEJSQUNFKSB7XG4gICAgICAgIGNvbnN0IG5ld0FycmF5ID0gW11cbiAgICAgICAgY3VycmVudC5wdXNoKG5ld0FycmF5KVxuICAgICAgICBzdGFjay5wdXNoKGN1cnJlbnQpXG4gICAgICAgIGN1cnJlbnQgPSBuZXdBcnJheVxuICAgICAgICBjdXJyZW50U3RyaW5nU3RhcnQgPSBwb3NpdGlvbiArIDFcbiAgICAgICAgZXhwZWN0VmFsdWUgPSB0cnVlXG4gICAgICB9IGVsc2UgaWYgKGNoYXIgPT09IENPTU1BKSB7XG4gICAgICAgIGV4cGVjdFZhbHVlID0gdHJ1ZVxuICAgICAgfSBlbHNlIGlmIChjaGFyID09PSBSQlJBQ0UpIHtcbiAgICAgICAgZXhwZWN0VmFsdWUgPSBmYWxzZVxuICAgICAgICBjb25zdCBhcnIgPSBzdGFjay5wb3AoKVxuICAgICAgICBpZiAoYXJyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFycmF5IHRleHQgLSB0b28gbWFueSAnfSdcIilcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gYXJyXG4gICAgICB9IGVsc2UgaWYgKGV4cGVjdFZhbHVlKSB7XG4gICAgICAgIGN1cnJlbnRTdHJpbmdTdGFydCA9IHBvc2l0aW9uXG4gICAgICAgIHdoaWxlIChcbiAgICAgICAgICAoY2hhciA9IHN0cltwb3NpdGlvbl0pICE9PSBDT01NQSAmJlxuICAgICAgICAgIGNoYXIgIT09IFJCUkFDRSAmJlxuICAgICAgICAgIHBvc2l0aW9uIDwgcmJyYWNlSW5kZXhcbiAgICAgICAgKSB7XG4gICAgICAgICAgKytwb3NpdGlvblxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnQgPSBzdHIuc2xpY2UoY3VycmVudFN0cmluZ1N0YXJ0LCBwb3NpdGlvbi0tKVxuICAgICAgICBjdXJyZW50LnB1c2goXG4gICAgICAgICAgcGFydCA9PT0gTlVMTF9TVFJJTkcgPyBudWxsIDogaGF2ZVRyYW5zZm9ybSA/IHRyYW5zZm9ybShwYXJ0KSA6IHBhcnRcbiAgICAgICAgKVxuICAgICAgICBleHBlY3RWYWx1ZSA9IGZhbHNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dhcyBleHBlY3RpbmcgZGVsaW1ldGVyJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0XG4gIH1cbn1cblxuY29uc3QgcGFyc2VBcnJheSA9IG1ha2VQYXJzZUFycmF5V2l0aFRyYW5zZm9ybSgpXG5cbmV4cG9ydHMucGFyc2UgPSAoc291cmNlLCB0cmFuc2Zvcm0pID0+XG4gIHRyYW5zZm9ybSAhPSBudWxsXG4gICAgPyBtYWtlUGFyc2VBcnJheVdpdGhUcmFuc2Zvcm0odHJhbnNmb3JtKShzb3VyY2UpXG4gICAgOiBwYXJzZUFycmF5KHNvdXJjZSlcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres-array/index.js\n");

/***/ })

};
;